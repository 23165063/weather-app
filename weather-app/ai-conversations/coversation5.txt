CONVERSATION 5: Code refinement and improvements
================================================

Me: I've been testing my weather advisor application and found some issues. The visualization menu gets stuck after showing charts in Jupyter, and the AI responses sometimes fail silently. Can you help me improve the robustness?

AI: Absolutely! These are common integration issues. Let's tackle them systematically:

**Issue 1: Visualization menu hanging in Jupyter**
This is typically caused by matplotlib interfering with input streams. Here's a fix:

```python
def handle_visualisations(weather_data_for_viz, location_name):
    # ... existing code ...
    
    if choice == "1":
        print(f"\nGenerating temperature visualisation for {location_name}...")
        try:
            create_temperature_visualisation(weather_data_for_viz, output_type='display')
            print("✅ Temperature visualization completed.")
            
            # CRITICAL: Force output flush after matplotlib
            import sys
            import time
            sys.stdout.flush()
            sys.stderr.flush()
            time.sleep(0.5)  # Let matplotlib finish completely
            
        except Exception as e:
            print(f"❌ Error creating visualization: {e}")
```

The key is forcing the output streams to flush and giving matplotlib time to complete.

Me: That helps! But I'm still having issues with the input prompts not appearing. Sometimes I have to interrupt the cell to see the prompt.

AI: This is a classic Jupyter input buffering issue. Let's use a more robust input approach:

**Before (problematic):**
```python
another_viz = input("See another visualization? (yes/no): ")
```

**After (robust):**
```python
# Force everything to flush before asking for input
import sys
sys.stdout.flush()
sys.stderr.flush()

# Use split prompts for better compatibility
print("➡️  See another type of visualisation for this location?")
print("   Type 'yes' or 'no' and press Enter:")
sys.stdout.flush()  # Force the prompt to appear

try:
    another_viz = input().strip().lower()
except (EOFError, KeyboardInterrupt):
    print("\nInput interrupted, returning to main menu...")
    break
```

Splitting the prompt from the input() call often resolves display issues.

Me: Much better! Now about the AI responses - sometimes generate_weather_response() fails but I don't get any feedback. How can I improve error handling?

AI: Great catch! Silent failures are the worst kind of bugs. Here's enhanced error handling:

**Before:**
```python
def generate_weather_response(parsed_question, weather_data):
    try:
        ai_response = get_response(prompt)
        return ai_response.strip()
    except Exception as e:
        return generate_enhanced_fallback_response(parsed_question, weather_data)
```

**After (with proper feedback):**
```python
def generate_weather_response(parsed_question, weather_data):
    try:
        ai_response = get_response(prompt)
        return ai_response.strip()
    except Exception as e:
        # Provide clear feedback about AI failure
        print(f"Note: AI response unavailable ({e}), using fallback response.")
        return generate_enhanced_fallback_response(parsed_question, weather_data)

def generate_enhanced_fallback_response(parsed_question, weather_data):
    """Enhanced fallback with better error context."""
    location = parsed_question.get("location", "the location")
    
    # Check if we have enough data for fallback
    if weather_data.get("error"):
        return f"Sorry, I couldn't get weather data. Error: {weather_data['error']}"
    
    if not weather_data.get("current") and not weather_data.get("forecast"):
        return f"I don't have enough weather data for {location} to provide a meaningful response."
    
    # ... rest of fallback logic with better error messages ...
```

This gives users clear feedback when things go wrong.

Me: That's much better for debugging! I'm also noticing that location parsing sometimes fails for common phrases. For example, "What's the weather like in New York?" extracts "New York Like" instead of "New York". Can you help improve the regex patterns?

AI: Excellent observation! The location extraction regex needs refinement. Here's the issue and fix:

**Problem:** The regex is too greedy and includes nearby words.

**Solution:** More precise patterns with better word boundaries:

```python
def extract_location(question):
    # Improved patterns with better boundaries
    location_patterns = [
        # "in [location]" - stop at time words or punctuation
        r"in\s+([A-Za-z\s]+?)(?:\s+(?:today|tomorrow|yesterday|on\s+\w+|in\s+\d+\s+days?|like|now)|\?|$)",
        
        # "weather in [location]" - more specific
        r"weather\s+in\s+([A-Za-z\s]+?)(?:\s+(?:today|tomorrow|yesterday|like)|\?|$)",
        
        # "[location] weather" - reverse pattern
        r"([A-Za-z\s]+?)\s+(?:weather|temperature|temp|forecast)",
        
        # "weather for [location]"
        r"weather\s+for\s+([A-Za-z\s]+?)(?:\s+(?:today|tomorrow|yesterday)|\?|$)",
    ]
    
    for pattern in location_patterns:
        match = re.search(pattern, question, re.IGNORECASE)
        if match:
            potential_location = match.group(1).strip()
            
            # Enhanced cleaning - remove more stop words
            cleaned = re.sub(r'\b(the|weather|temperature|temp|will|be|is|what|how|like|today|tomorrow)\b', 
                           '', potential_location, flags=re.IGNORECASE)
            cleaned = ' '.join(cleaned.split())  # Normalize spaces
            
            if cleaned and cleaned.lower() not in ["here", "my location", "current location", "me"]:
                return cleaned.title()
    
    return None
```

The key improvements:
- More specific stop conditions in regex
- Better word boundary detection
- Enhanced cleaning of extracted text

Me: Perfect! That fixes the location extraction. One final issue - sometimes the forecast data has inconsistent date formats. My visualization functions crash when they can't parse dates. How can I make date handling more robust?

AI: Date inconsistency is a real pain! Here's a robust date handling approach:

```python
def safe_date_parse(date_string, fallback_format="%b %d"):
    """Safely parse various date formats with intelligent fallbacks."""
    if not date_string:
        return "Unknown"
    
    # Common date formats to try
    date_formats = [
        "%Y-%m-%d",      # 2024-05-23
        "%d-%m-%Y",      # 23-05-2024
        "%m/%d/%Y",      # 05/23/2024
        "%d/%m/%Y",      # 23/05/2024
        "%Y%m%d",        # 20240523
        "%b %d, %Y",     # May 23, 2024
    ]
    
    for fmt in date_formats:
        try:
            date_obj = datetime.strptime(str(date_string), fmt)
            return date_obj.strftime(fallback_format)
        except ValueError:
            continue
    
    # If all parsing fails, try to extract numbers and make sense of them
    try:
        # Extract numbers from string (handles "2024-05-23T00:00:00" etc.)
        numbers = re.findall(r'\d+', str(date_string))
        if len(numbers) >= 3:
            year, month, day = int(numbers[0]), int(numbers[1]), int(numbers[2])
            # Handle year/month/day vs month/day/year ambiguity
            if year > 2000:  # Likely YYYY-MM-DD
                date_obj = datetime(year, month, day)
            else:  # Likely MM-DD-YYYY
                date_obj = datetime(int(numbers[2]), year, month)
            return date_obj.strftime(fallback_format)
    except (ValueError, IndexError):
        pass
    
    # Ultimate fallback - return the original string cleaned up
    cleaned = re.sub(r'[^\w\s-/]', '', str(date_string))
    return cleaned[:10] if cleaned else "Unknown"

# Use in your visualization functions:
def create_temperature_visualisation(weather_data, output_type='display'):
    # ... existing code ...
    
    for day_data in forecast_list:
        try:
            # Use robust date parsing
            formatted_date = safe_date_parse(day_data.get("date"), "%b %d")
            dates.append(formatted_date)
            # ... rest of processing ...
        except Exception as e:
            print(f"Skipping malformed day data: {e}")
            continue
```

This handles virtually any date format you might encounter!

Me: Wow, that's incredibly thorough! These improvements make the application much more reliable. The error handling, input fixes, location parsing, and date handling all work together to create a robust system.

AI: Exactly! You've implemented several key robustness principles:

**1. Graceful Degradation:** When AI fails, fallback responses still work
**2. User Feedback:** Clear messages about what's happening and why
**3. Input Validation:** Handle edge cases in parsing and user input
**4. Error Recovery:** Continue working even when individual components fail
**5. Cross-Platform Compatibility:** Works reliably in different environments

These improvements transform your application from a prototype into a production-ready system. The layered error handling means users get a good experience even when things go wrong behind the scenes.

**Key Takeaway:** Robust applications aren't just about the happy path - they're about handling the 100 ways things can go wrong gracefully!

