CONVERSATION 4: Visualization creation process
=============================================

Me: I need to implement two visualization functions: create_temperature_visualisation() and create_precipitation_visualisation(). They should handle both 'display' and 'figure' output types. Can you help me design these?

AI: Absolutely! For weather visualizations, you'll want different chart types that best represent each data type:

**Temperature**: Line chart (shows trends over time)
**Precipitation**: Bar chart (shows discrete daily values)

Here's the basic structure:

```python
import matplotlib.pyplot as plt
from datetime import datetime

def create_temperature_visualisation(weather_data, output_type='display'):
    """Create line chart for temperature trends."""
    if weather_data.get("error"):
        print(f"Cannot create visualisation: {weather_data['error']}")
        return None if output_type == 'display' else empty_figure()
    
    forecast = weather_data.get("forecast", [])
    if not forecast:
        print("No forecast data available.")
        return None if output_type == 'display' else empty_figure()
    
    # Extract data
    dates, max_temps, min_temps = [], [], []
    for day in forecast:
        dates.append(day.get("date"))
        max_temps.append(day.get("max_temp_c"))
        min_temps.append(day.get("min_temp_c"))
    
    # Create plot
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(dates, max_temps, 'r-o', label='Max Temp (°C)')
    ax.plot(dates, min_temps, 'b--s', label='Min Temp (°C)')
    
    # Formatting
    ax.set_title("Temperature Forecast")
    ax.set_ylabel("Temperature (°C)")
    ax.legend()
    
    return fig if output_type == 'figure' else plt.show()
```

Would you like me to elaborate on any specific aspect?

Me: This is a good start, but I'm concerned about data quality issues. What if some temperature values are None or dates are malformed? How should I handle these cases?

AI: Excellent point! Real-world data is messy. Here's a robust approach with data validation:

```python
def create_temperature_visualisation(weather_data, output_type='display'):
    # ... error checking as before ...
    
    dates, max_temps, min_temps = [], [], []
    
    for day_data in forecast_list:
        try:
            # Safe date parsing with fallback
            date_str = day_data.get("date", "Unknown")
            try:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%b %d")  # "Oct 27"
            except (ValueError, TypeError):
                formatted_date = date_str  # Use raw string as fallback
            
            dates.append(formatted_date)
            max_temps.append(day_data.get("max_temp_c"))
            min_temps.append(day_data.get("min_temp_c"))
        except Exception as e:
            print(f"Skipping malformed day data: {e}")
            continue
    
    # Filter out None values consistently
    valid_indices = [i for i, (mx, mn) in enumerate(zip(max_temps, min_temps)) 
                     if mx is not None and mn is not None]
    
    if not valid_indices:
        print("Insufficient temperature data for visualization.")
        return handle_empty_case(output_type)
    
    # Keep only valid data points
    dates = [dates[i] for i in valid_indices]
    max_temps = [max_temps[i] for i in valid_indices]
    min_temps = [min_temps[i] for i in valid_indices]
    
    # ... rest of plotting code ...
```

This ensures your visualization won't crash on bad data.

Me: Great! What about the precipitation visualization? Should I use a different approach since it's showing percentages rather than temperatures?

AI: Exactly right! Precipitation data needs different handling because it's probability-based. Here's an effective approach:

```python
def create_precipitation_visualisation(weather_data, output_type='display'):
    # ... similar error checking ...
    
    dates, chance_of_rain = [], []
    
    for day_data in forecast_list:
        try:
            # Date formatting (same as temperature)
            date_obj = datetime.strptime(day_data.get("date"), "%Y-%m-%d")
            dates.append(date_obj.strftime("%b %d"))
        except (ValueError, TypeError):
            dates.append(day_data.get("date", "Unknown"))
            
        chance_of_rain.append(day_data.get("chance_of_rain_percent"))
    
    # Filter None values
    valid_indices = [i for i, rain in enumerate(chance_of_rain) if rain is not None]
    
    if not valid_indices:
        return handle_insufficient_data(output_type)
    
    dates = [dates[i] for i in valid_indices]
    chance_of_rain = [chance_of_rain[i] for i in valid_indices]
    
    # Create bar chart
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(dates, chance_of_rain, color='skyblue', label='Chance of Rain (%)')
    
    # Add percentage labels on bars
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{height}%', ha='center', va='bottom')
    
    ax.set_ylabel("Chance of Rain (%)")
    ax.set_title("Precipitation Forecast")
    ax.set_ylim(0, 105)  # Room for labels above bars
    
    return fig if output_type == 'figure' else plt.show()
```

The bar chart with percentage labels is much clearer for this type of data.

Me: I like the percentage labels! But what about chart formatting and making them look more professional? Also, how do I handle the output_type parameter properly?

AI: Great questions! Professional charts need attention to detail. Here's the enhanced version:

```python
def create_temperature_visualisation(weather_data, output_type='display'):
    # ... data processing as before ...
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Plot with better styling
    ax.plot(dates, max_temps, marker='o', linestyle='-', color='red', 
            linewidth=2, markersize=6, label='Max Temp (°C)')
    ax.plot(dates, min_temps, marker='s', linestyle='--', color='blue',
            linewidth=2, markersize=6, label='Min Temp (°C)')
    
    # Professional formatting
    ax.set_xlabel("Date", fontsize=12)
    ax.set_ylabel("Temperature (°C)", fontsize=12)
    ax.set_title("Daily Temperature Forecast", fontsize=14, fontweight='bold')
    ax.legend(loc='best', fontsize=10)
    ax.grid(True, linestyle=':', alpha=0.7)  # Subtle grid
    
    # Rotate date labels for better fit
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()  # Prevent label cutoff
    
    # Handle output_type properly
    if output_type == 'figure':
        return fig
    elif output_type == 'display':
        plt.show()
        return None
    else:
        print(f"Warning: Unknown output_type '{output_type}'. Displaying by default.")
        plt.show()
        return None
```

Key improvements:
- Better colors and markers
- Professional grid and typography
- Proper axis labeling
- `tight_layout()` prevents cutoff
- Clear `output_type` handling

Me: This looks much better! One last question - how should I handle the case where there's an error but output_type is 'figure'? I want to return something consistent.

AI: Excellent thinking about API consistency! Here's how to handle error cases gracefully:

```python
def create_error_figure(message):
    """Create a figure displaying an error message."""
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.text(0.5, 0.5, message, ha='center', va='center', 
            fontsize=14, color='red',
            bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray"))
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')  # Hide axes for clean error display
    return fig

def create_temperature_visualisation(weather_data, output_type='display'):
    # Error handling with consistent return types
    if weather_data.get("error"):
        error_msg = f"Cannot create visualization:\n{weather_data['error']}"
        if output_type == 'figure':
            return create_error_figure(error_msg)
        else:
            print(error_msg)
            return None
    
    forecast_list = weather_data.get("forecast")
    if not forecast_list:
        error_msg = "No forecast data available\nfor temperature visualization"
        if output_type == 'figure':
            return create_error_figure(error_msg)
        else:
            print("No forecast data available.")
            return None
    
    # ... rest of implementation ...
```

This ensures your function always returns the expected type, making it much more reliable for integration with other systems.

Me: Perfect! This approach gives me professional-looking charts with robust error handling. The consistent return types will make integration much smoother. I especially like how the error figures provide visual feedback instead of just crashing.

AI: Exactly! You've implemented several important principles:

1. **Data validation**: Handle None values and malformed data gracefully
2. **Professional presentation**: Good typography, colors, and layout
3. **API consistency**: Always return the expected type
4. **User experience**: Visual error messages instead of crashes
5. **Code reusability**: Both functions follow the same patterns

These visualization functions will integrate seamlessly with your weather advisor application and provide a great user experience!
