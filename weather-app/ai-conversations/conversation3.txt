CONVERSATION 3: Natural language processing development
======================================================

Me: I need to implement parse_weather_question() to extract information from natural language queries like "What's the temperature in London tomorrow?" Can you help me design the approach?

AI: Absolutely! Natural language parsing for weather queries involves extracting three key components:

1. **Location** (where)
2. **Time period** (when) 
3. **Weather attribute** (what)

Here's a structured approach:

```python
def parse_weather_question(question):
    parsed_info = {
        "location": None,
        "time_period_keyword": "today",  # default
        "days_offset": 0,
        "attribute": "general",
        "original_question": question
    }
    
    # 1. Identify time period
    # 2. Identify weather attribute  
    # 3. Extract location
    
    return parsed_info
```

Would you like me to help you implement each component step by step?

Me: Yes, let's start with time period extraction. I want to handle "today", "tomorrow", "in 3 days", and day names like "Monday".

AI: Great! Time period extraction needs regex patterns and date calculations. Here's the approach:

```python
import re
from datetime import datetime, timedelta

# Helper for weekday calculations
DAYS_OF_WEEK = {
    "monday": 0, "tuesday": 1, "wednesday": 2, "thursday": 3,
    "friday": 4, "saturday": 5, "sunday": 6
}

def get_days_offset_for_weekday(target_day_name):
    """Calculate days from today until next occurrence of target_day_name."""
    today_idx = datetime.today().weekday()
    target_day_idx = DAYS_OF_WEEK[target_day_name.lower()]
    
    if today_idx == target_day_idx:
        return 0  # Today
    elif target_day_idx > today_idx:
        return target_day_idx - today_idx
    else:
        return 7 - (today_idx - target_day_idx)  # Next week

# Time period patterns
def extract_time_period(question):
    q_lower = question.lower()
    
    # "in X days" pattern
    m_in_days = re.search(r"in\s+(\d+)\s+days?", q_lower)
    if m_in_days:
        num_days = int(m_in_days.group(1))
        if 0 <= num_days <= 5:  # Valid forecast range
            return "in_{}_days".format(num_days), num_days
    
    # Tomorrow
    if "tomorrow" in q_lower:
        return "tomorrow", 1
        
    # Day names
    for day_name in DAYS_OF_WEEK.keys():
        if day_name in q_lower:
            offset = get_days_offset_for_weekday(day_name)
            return day_name, offset
    
    # Default to today
    return "today", 0
```

This handles all the common time expressions you mentioned.

Me: That's good, but I'm worried about edge cases. What if someone asks about "next Monday" vs just "Monday"? And how do I handle requests for dates too far in the future?

AI: Excellent point! Edge cases are crucial for robust NLP. Here's an improved version:

```python
def extract_time_period(question):
    q_lower = question.lower()
    
    # "in X days" with range validation
    m_in_days = re.search(r"in\s+(\d+)\s+days?", q_lower)
    if m_in_days:
        num_days = int(m_in_days.group(1))
        if 0 <= num_days <= 5:
            return f"in_{num_days}_days", num_days
        else:
            return "future_unsupported", None  # Too far out
    
    # Day names with "next" handling
    for day_name in DAYS_OF_WEEK.keys():
        # Look for "next Monday" or just "Monday"
        pattern = rf"\b(on\s+|next\s+)?{day_name}\b"
        if re.search(pattern, q_lower):
            offset = get_days_offset_for_weekday(day_name)
            if offset <= 5:  # Within forecast range
                return day_name, offset
            else:
                return "future_unsupported", None
    
    # Handle other time keywords
    if "tomorrow" in q_lower:
        return "tomorrow", 1
    elif any(kw in q_lower for kw in ["today", "now", "currently"]):
        return "today", 0
    
    return "today", 0  # Safe default
```

This handles edge cases and provides clear feedback for unsupported date ranges.

Me: Great! Now how about extracting weather attributes? I want to recognize temperature, rain, wind, humidity, and general weather questions.

AI: Perfect! Attribute extraction uses keyword mapping with regex patterns:

```python
def extract_weather_attribute(question):
    q_lower = question.lower()
    
    attribute_keywords = {
        "temperature": [r"temperature", r"temp\b", r"hot", r"cold", r"warm", r"degrees"],
        "rain": [r"rain", r"raining", r"precipitation", r"showers", r"drizzle", r"wet"],
        "wind": [r"wind", r"windy", r"breeze", r"gale"],
        "humidity": [r"humidity", r"humid", r"damp"],
        "description": [r"sun", r"sunny", r"clouds?", r"cloudy", r"clear", r"overcast", r"conditions"]
    }
    
    # Check each attribute category
    for attribute, patterns in attribute_keywords.items():
        for pattern in patterns:
            if re.search(rf"\b{pattern}\b", q_lower):
                return attribute
    
    # If "weather" mentioned but no specific attribute, use description
    if "weather" in q_lower:
        return "description"
        
    return "general"  # Default for unclear queries
```

The `\b` word boundaries ensure "temperature" matches but "attempt" doesn't.

Me: Location extraction seems like the trickiest part. How do I reliably extract location names from questions?

AI: You're right - location extraction is the most challenging! Here's a multi-strategy approach:

```python
def extract_location(question):
    # Strategy 1: Common patterns
    location_patterns = [
        r"in\s+([A-Za-z\s]+?)(?:\s+(?:today|tomorrow|yesterday)|\?|$)",
        r"for\s+([A-Za-z\s]+?)(?:\s+(?:today|tomorrow|yesterday)|\?|$)", 
        r"([A-Za-z\s]+?)\s+(?:weather|temperature|forecast)",
        r"weather\s+in\s+([A-Za-z\s]+?)(?:\?|$)"
    ]
    
    for pattern in location_patterns:
        match = re.search(pattern, question, re.IGNORECASE)
        if match:
            location = match.group(1).strip()
            # Clean up common words
            location = re.sub(r'\b(the|weather|will|be|is)\b', '', location, flags=re.IGNORECASE)
            location = ' '.join(location.split())  # Normalize spaces
            
            if location and location.lower() not in ["here", "my location"]:
                return location.title()  # Proper capitalization
    
    # Strategy 2: Look for capitalized words (proper nouns)
    cap_words = re.findall(r'\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b', question)
    for word_seq in cap_words:
        if word_seq.lower() not in ['What', 'Will', 'Today', 'Tomorrow', 'Weather']:
            return word_seq
    
    return None  # No location found
```

This tries multiple strategies and cleans up the results.

Me: This is really comprehensive! Can you show me how to integrate all these components into the final parse_weather_question() function?

AI: Absolutely! Here's the integrated function that combines all the components:

```python
def parse_weather_question(question):
    """Parse a natural language weather question into structured data."""
    parsed_info = {
        "location": None,
        "time_period_keyword": "today",
        "days_offset": 0,
        "specific_date": datetime.today().strftime("%Y-%m-%d"),
        "attribute": "general",
        "original_question": question
    }
    
    # Extract time period
    time_keyword, days_offset = extract_time_period(question)
    parsed_info["time_period_keyword"] = time_keyword
    parsed_info["days_offset"] = days_offset
    
    # Calculate specific date if days_offset is valid
    if days_offset is not None:
        target_date = datetime.today() + timedelta(days=days_offset)
        parsed_info["specific_date"] = target_date.strftime("%Y-%m-%d")
    else:
        parsed_info["specific_date"] = None  # Unsupported future date
    
    # Extract weather attribute
    parsed_info["attribute"] = extract_weather_attribute(question)
    
    # Extract location
    parsed_info["location"] = extract_location(question)
    
    return parsed_info
```

This gives you a complete structured representation of any weather question!

Me: Perfect! This modular approach makes it easy to test and debug each component separately. Thank you for the comprehensive solution!

AI: You're welcome! The key advantages of this approach:

1. **Modular design**: Each extraction function can be tested independently
2. **Robust error handling**: Graceful fallbacks for edge cases  
3. **Extensible**: Easy to add new patterns or attributes
4. **Consistent output**: Always returns the same data structure

This will integrate perfectly with your AI response generation system!
